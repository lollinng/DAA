def fibonacci(n):
    if(n <= 1):
        return n
    else:
        return(fibonacci(n-1) + fibonacci(n-2))
    
n = int(input("Enter N :"))
fibList = []
print("Fibonacci sequence for N is:")
for i in range(n):
    fibList.append(fibonacci(i))
print(fibList)

a = 0
b = 1
n=int(input("Enter N : "))
fibList = []
fibList.append(a)
fibList.append(b)
while(n-2):
    c=a+b
    a,b = b,c
    fibList.append(c)
    n=n-1
print("Fibonacci sequence for N is:")
print(fibList)



## A Huffman Tree Node
import heapq

class node:
    def __init__(self, freq, symbol, left=None, right=None):
    
        self.freq = freq     # frequency of symbol
        self.symbol = symbol # symbol name (character)
        self.left = left       # node left of current node
        self.right = right       # node right of current node
        self.huff = ''               # tree direction values (0/1)

    def __lt__(self, nxt):
        return self.freq < nxt.freq

def printNodes(node, val=''):
    newVal = val + str(node.huff)  # huffman code for current node
    # if node is not an edge node then traverse inside it
    if(node.left):
        printNodes(node.left, newVal)
    if(node.right):
        printNodes(node.right, newVal)
    
    # if edge node
    if(not node.left and not node.right):
        print(f"{node.symbol} -> {newVal}")



chars = ['a', 'b', 'c', 'd', 'e', 'f']
freq = [ 5, 9, 12, 13, 16, 45]


nodes = [] # list where nodes will be added and hepified using heap library

# converting characters and frequencies
# into huffman tree nodes
# nlog(n)
for x in range(len(chars)):                         # n
    heapq.heappush(nodes, node(freq[x], chars[x]))  # logn

while len(nodes) > 1:
    
    # get 2 minimum numbers from heap
    left = heapq.heappop(nodes)
    right = heapq.heappop(nodes)

    # assign directional value to these nodes acc to tree
    left.huff = 0
    right.huff = 1

    # combine the 2 smallest nodes to create
    # new node as their parent
    newNode = node(left.freq+right.freq, left.symbol+right.symbol, left, right)
    heapq.heappush(nodes, newNode)

printNodes(nodes[0])